<?php
/**
 * @file
 * Installation and schema related functions for the OAuth module
 */

/**
 * Move oauth_common settings from Drupal variables to Backdrop config.
 */
function oauth_common_update_1000() {
  // Migrate variables to config.
  $config = config('oauth_common.settings');
  $config->set('oauth_common_enable_provider', update_variable_get('oauth_common_enable_provider', TRUE));
  $config->set('oauth_common_request_token_lifetime', update_variable_get('oauth_common_request_token_lifetime', 7200));
  $config->set('oauth_common_login_path', update_variable_get('oauth_common_login_path', 'OAUTH_COMMON_LOGIN_PATH'));
  $config->save();
  // Delete variables.
  update_variable_del('oauth_common_enable_provider');
  update_variable_del('oauth_common_request_token_lifetime');
  update_variable_del('oauth_common_login_path');
}


/**
 * Implements hook_requirements().
 */
function oauth_common_requirements($phase) {
  $requirements = [];
  $t = get_t();
  $curl_available = function_exists('curl_init');

  $requirements['oauth_common_curl'] = [
    'title' => $t('OAuth'),
    'value' => $curl_available ? $t('cURL library Enabled') : $t('cURL library not found'),
  ];

  if (!$curl_available) {
    $requirements['oauth_common_curl'] += [
      'severity' => REQUIREMENT_ERROR,
      'description' => $t("BackdropOAuthClient requires the PHP <a href='!curl_url'>cURL</a> library.",
        ['!curl_url' => 'http://php.net/manual/en/curl.setup.php']),
    ];
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function oauth_common_schema() {
  $schema = [];

  $schema['oauth_common_context'] = [
    'description' => 'Stores contexts for OAuth common',
    'export' => [
      'identifier' => 'context',
      'export callback' => 'oauth_common_context_export',
      'list callback' => 'oauth_common_context_list',
      'key' => 'name',
      'api' => [
        'owner' => 'oauth_common',
        'api' => 'oauth',
        'minimum_version' => 1,
        'current_version' => 1,
      ],
    ],
    'fields' => [
      'cid' => [
        'type' => 'serial',
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'not null' => TRUE,
        'no export' => TRUE,
      ],
      'name' => [
        'description' => 'The computer-readable name of the context.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'title' => [
        'description' => 'The localizable title of the authorization context.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ],
      'authorization_options' => [
        'description' => 'Authorization options.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'object default' => [],
      ],
      'authorization_levels' => [
        'description' => 'Authorization levels for the context.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'object default' => [],
      ],
    ],
    'primary key' => ['cid'],
    'unique keys' => [
      'context' => ['name'],
    ],
  ];

  $schema['oauth_common_consumer'] = _oauth_common_consumer_schema();
  $schema['oauth_common_provider_consumer'] = _oauth_common_provider_consumer_schema();
  $schema['oauth_common_token'] = _oauth_common_token_schema();
  $schema['oauth_common_provider_token'] = _oauth_common_provider_token_schema();

  $schema['oauth_common_nonce'] = [
    'description' => 'Stores timestamp against nonce for repeat attacks.',
    'fields' => [
      'nonce' => [
        'description' => 'The random string used on each request.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'timestamp' => [
        'description' => 'The timestamp of the request.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'token_key' => [
        'description' => 'Token key.',
        // This is our own internal key - it's 0 or 32 characters long
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['nonce'],
    'indexes' => [
      'timekey' => ['timestamp', 'token_key'],
    ],
  ];

  return $schema;
}

/**
 * Contains the consumer schema - used by oauth_common_schema() as well as
 * latest related update function
 */
function _oauth_common_consumer_schema() {
  return [
    'description' => 'Keys and secrets for OAuth consumers, both those provided by this site and other sites.',
    'fields' => [
      'csid' => [
        'type' => 'serial',
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'not null' => TRUE,
      ],
      'key_hash' => [
        'description' => 'SHA1-hash of consumer_key.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
      ],
      // Key is a reserved word in MySQL so lets avoid that
      'consumer_key' => [
        'description' => 'Consumer key.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'secret' => [
        'description' => 'Consumer secret.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'configuration' => [
        'description' => 'Consumer configuration',
        'type' => 'text',
        'serialized' => TRUE,
        'size' => 'big',
        'not null' => TRUE,
        'object default' => [],
      ],
    ],
    'primary key' => ['csid'],
    'indexes' => [
      'key_hash' => ['key_hash'],
    ],
  ];
}

/**
 * Contains the provider consumer schema - used by oauth_common_schema() as
 * well as latest related update function
 */
function _oauth_common_provider_consumer_schema() {
  return [
    'description' => 'Additional data for OAuth consumers provided by this site.',
    'fields' => [
      'csid' => [
        'description' => 'The {oauth_common_consumer}.csid this data is related to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ],
      'consumer_key' => [
        'description' => 'Consumer key.',
        // This is our own internal key - it's always 32 characters long
        'type' => 'char',
        'length' => 32,
        'not null' => TRUE,
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the consumer was created, as a Unix timestamp.',
      ],
      'changed' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The last time the consumer was edited, as a Unix timestamp.',
      ],
      'uid' => [
        'description' => 'The application owner.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'name' => [
        'description' => 'The application name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      'context' => [
        'description' => 'The application context.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ],
      'callback_url' => [
        'description' => 'Callback URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'primary key' => ['consumer_key'],
    'unique keys' => [
      'csid' => ['csid'],
    ],
    'indexes' => [
      'uid' => ['uid'],
    ],
    'foreign keys' => [
      'oauth_common_consumer' => [
        'table' => 'oauth_common_consumer',
        'columns' => ['csid' => 'csid'],
      ],
      'users' => [
        'table' => 'users',
        'columns' => ['uid' => 'uid'],
      ],
    ],
  ];
}

/**
 * Contains the token schema - used by oauth_common_schema() as well as latest
 * related update function
 */
function _oauth_common_token_schema() {
  return [
    'description' => 'Tokens stored on behalf of providers or consumers for request and services accesses.',
    'fields' => [
      'tid' => [
        'type' => 'serial',
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'not null' => TRUE,
      ],
      'csid' => [
        'description' => 'The {oauth_common_consumer}.csid this token is related to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'key_hash' => [
        'description' => 'SHA1-hash of token_key.',
        'type' => 'char',
        'length' => 40,
        'not null' => TRUE,
      ],
      // Key is a reserved word in MySQL so lets avoid that
      'token_key' => [
        'description' => 'Token key.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'secret' => [
        'description' => 'Token secret.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'expires' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The expiry time for the token, as a Unix timestamp.',
      ],
      'type' => [
        'description' => 'Token type: request or access.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1, //OAUTH_COMMON_TOKEN_TYPE_ACCESS
      ],
      'uid' => [
        'description' => 'User ID from {user}.uid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'callback_url' => [
        'description' => 'Callback URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'primary key' => ['tid'],
    'indexes' => [
      'key_hash' => ['key_hash'],
    ],
    'foreign keys' => [
      'oauth_common_consumer' => [
        'table' => 'oauth_common_consumer',
        'columns' => ['csid' => 'csid'],
      ],
      'users' => [
        'table' => 'users',
        'columns' => ['uid' => 'uid'],
      ],
    ],
  ];
}

/**
 * Contains the provider token schema - used by oauth_common_schema() as well
 * as latest related update function
 */
function _oauth_common_provider_token_schema() {
  return [
    'description' => 'Additional data for OAuth tokens provided by this site.',
    'fields' => [
      'tid' => [
        'description' => 'The {oauth_common_token}.tid this data is related to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ],
      'token_key' => [
        'description' => 'Token key.',
        // This is our own internal key - it's always 32 characters long
        'type' => 'char',
        'length' => 32,
        'not null' => TRUE,
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the token was created, as a Unix timestamp.',
      ],
      'changed' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The last time the token was edited, as a Unix timestamp.',
      ],
      'services' => [
        'description' => 'An array of services that the user allowed the consumer to access.',
        'type' => 'text',
      ],
      'authorized' => [
        'description' => 'In case its a request token, it checks if the user already authorized the consumer to get an access token.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['token_key'],
    'unique keys' => [
      'tid' => ['tid'],
    ],
    'foreign keys' => [
      'oauth_common_token' => [
        'table' => 'oauth_common_token',
        'columns' => ['tid' => 'tid'],
      ],
    ],
  ];
}

/**
 * Check callback_url fields in oauth_common_token and
 * oauth_common_provider_consumer tables and update these
 * if necessary.
 */
function oauth_common_update_1101() {
  // code to be added as fix for issue #6
    $spec = [
      'description' => 'Callback URL.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ];
    // more code to be added
  }
}

/**
 * Implements hook_update_last_removed().
 */
function oauth_common_update_last_removed() {
  return 7101;
}